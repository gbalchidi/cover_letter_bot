import logging
import os
import re
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
from openai import OpenAI
import nest_asyncio
import tempfile
from telegram.constants import DocumentMimeType
from PyPDF2 import PdfReader
import docx

# Try to load environment variables from .env file
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass  # python-dotenv not installed, will use system environment variables

nest_asyncio.apply()

# Get tokens from environment variables
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Validate that required environment variables are set
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set. Please set it in your .env file or environment.")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY environment variable is not set. Please set it in your .env file or environment.")

# Set up logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize OpenAI client
client = OpenAI(api_key=OPENAI_API_KEY)

# States for conversation
WAITING_FOR_CV = "waiting_for_cv"
READY_FOR_JOBS = "ready_for_jobs"

# Function to detect language
def detect_primary_language(text):
    """Simple language detection based on character count."""
    russian_chars = len(re.findall(r'[–∞-—è–ê-–Ø—ë–Å]', text))
    english_chars = len(re.findall(r'[a-zA-Z]', text))
    
    if russian_chars > english_chars:
        return 'russian'
    else:
        return 'english'

# Function to check language consistency
def check_language_consistency(text):
    """Check if text has mixed languages."""
    lines = text.split('\n')
    russian_lines = 0
    english_lines = 0
    
    for line in lines:
        if len(line.strip()) > 10:  # Only check meaningful lines
            if detect_primary_language(line) == 'russian':
                russian_lines += 1
            else:
                english_lines += 1
    
    # If more than 20% of lines are in a different language, it's mixed
    total_lines = russian_lines + english_lines
    if total_lines > 0:
        if russian_lines > english_lines:
            return 'russian' if english_lines / total_lines < 0.2 else 'mixed'
        else:
            return 'english' if russian_lines / total_lines < 0.2 else 'mixed'
    
    return detect_primary_language(text)

# Function to unify language
async def unify_language(text, target_language):
    """Unify the language of the cover letter."""
    prompt = f"""–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ {'—Ä—É—Å—Å–∫–∏–π' if target_language == 'russian' else '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π'} —è–∑—ã–∫. 
–°–æ—Ö—Ä–∞–Ω–∏ –≤—Å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
–ü—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:

{text}"""

    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.3,
        max_tokens=1500
    )
    return response.choices[0].message.content.strip()

# Function to escape markdown characters for Telegram
def escape_markdown_v2(text):
    """Escape special characters for Telegram MarkdownV2."""
    # List of characters to escape
    escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    
    # Escape each character
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    
    return text

# Function to handle the /start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Check if user already has a CV saved
    if context.user_data.get('cv'):
        await update.message.reply_text(
            '–£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å –≤–∞—à–µ —Ä–µ–∑—é–º–µ! üìÑ\n\n'
            '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ.\n\n'
            '–ö–æ–º–∞–Ω–¥—ã:\n'
            '/reset - –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—é–º–µ\n'
            '/show_cv - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ'
        )
        context.user_data['state'] = READY_FOR_JOBS
    else:
        await update.message.reply_text(
            '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞. üëã\n\n'
            '–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ. '
            '–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ª—é–±—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –∞ —è –±—É–¥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –Ω–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞.'
        )
        context.user_data['state'] = WAITING_FOR_CV

# Function to reset CV
async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data['cv'] = None
    context.user_data['state'] = WAITING_FOR_CV
    await update.message.reply_text(
        '–†–µ–∑—é–º–µ —É–¥–∞–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.'
    )

# Function to show saved CV
async def show_cv(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get('cv'):
        cv_preview = context.user_data['cv'][:500] + "..." if len(context.user_data['cv']) > 500 else context.user_data['cv']
        escaped_cv = escape_markdown_v2(cv_preview)
        await update.message.reply_text(
            f"–í–∞—à–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):\n\n`{escaped_cv}`",
            parse_mode='MarkdownV2'
        )
    else:
        await update.message.reply_text(
            '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ!'
        )

# Part 1: About Me section
async def generate_about_me(job_text, cv_text):
    """Generate the 'About Me' section of the cover letter."""
    prompt = f"""–Ø —Ö–æ—á—É, —á—Ç–æ–±—ã —Ç—ã –ø–æ–º–æ–≥ –º–Ω–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —á–∞—Å—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ "–û —Å–µ–±–µ" (–∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ). –ö–æ–≥–¥–∞ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Ä–µ–∑—é–º–µ –∏ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏, —Å–¥–µ–ª–∞–π —Å–ª–µ–¥—É—é—â–µ–µ:

–ù–∞—á–Ω–∏ –ø–∏—Å—å–º–æ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–µ–Ω—è –∑–æ–≤—É—Ç <–ò–º—è>, —É–≤–∏–¥–µ–ª, —á—Ç–æ –≤—ã –≤ –ø–æ–∏—Å–∫–µ <–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏>." –ò—Å–ø–æ–ª—å–∑—É–π –∏–º—è –∏–∑ —Ä–µ–∑—é–º–µ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏ (–µ—Å–ª–∏ –≤ –≤–∞–∫–∞–Ω—Å–∏–∏ —è–≤–Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏, –≤—ã–±–µ—Ä–∏ –µ–≥–æ –ø–æ —Å–º—ã—Å–ª—É). –ò–º—è –∏ –ø–æ–∑–∏—Ü–∏—é –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å.
–ù–∞–π–¥–∏ –≤ —Ä–µ–∑—é–º–µ –±–ª–æ–∫ "–û —Å–µ–±–µ" (summary, profile –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π). –ï—Å–ª–∏ —Ç–∞–∫–æ–π –±–ª–æ–∫ –µ—Å—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –ë–ï–ó –ö–ê–ö–ò–•-–õ–ò–ë–û –∏–∑–º–µ–Ω–µ–Ω–∏–π, –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∏–ª–∏ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏. –í–∫–ª—é—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥ —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞ –Ω–∞ —è–∑—ã–∫ –≤–∞–∫–∞–Ω—Å–∏–∏, –µ—Å–ª–∏ —è–∑—ã–∫–∏ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è.
–ï—Å–ª–∏ –±–ª–æ–∫–∞ "–û —Å–µ–±–µ" –≤ —Ä–µ–∑—é–º–µ –Ω–µ—Ç, —Å–∞–º–º–∞—Ä–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–∑ –≤—Å–µ–≥–æ —Ä–µ–∑—é–º–µ –Ω–∞ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤—ã–¥–µ–ª—è—è –æ–ø—ã—Ç –∏ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏.
–í–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—Å–∞–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è: –µ—Å–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º ‚Äî –≤—Å—ë –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –µ—Å–ª–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º ‚Äî –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.

–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –¥—Ä—É–≥–∏—Ö —Å–µ–∫—Ü–∏–π, –ø–æ—è—Å–Ω–µ–Ω–∏–π, –ø–æ–¥–ø–∏—Å–µ–π, –≤—ã–≤–æ–¥–æ–≤, –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–π –∏–ª–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π, –∫—Ä–æ–º–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –±–ª–æ–∫–∞ "–û —Å–µ–±–µ". –ï—Å–ª–∏ –±–ª–æ–∫ "–û —Å–µ–±–µ" –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å –µ–≥–æ, –ª–∏–±–æ –ø–µ—Ä–µ–≤–µ–¥–∏ –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ —è–∑—ã–∫–∞, –Ω–æ –Ω–µ –¥–æ–ø–∏—Å—ã–≤–∞–π –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è.

–¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏:
{job_text}

–†–µ–∑—é–º–µ:
{cv_text}"""

    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.3,
        max_tokens=500
    )
    return response.choices[0].message.content.strip()

# Part 2: Why am I a good fit?
async def generate_good_fit(job_text, cv_text):
    """Generate the 'Why am I a good fit' section."""
    prompt = f"""–Ø —Ö–æ—á—É, —á—Ç–æ–±—ã —Ç—ã –≤—ã—Å—Ç—É–ø–∏–ª –≤ —Ä–æ–ª–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–≤—Ç–æ—Ä–∞ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º. 

–í–ê–ñ–ù–û: –¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –í–ê–ö–ê–ù–°–ò–Æ, –∞ –ù–ï —Ä–µ–∑—é–º–µ. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –ø–∏—à–µ—Ç—Å—è –ø–∏—Å—å–º–æ –Ω—É–∂–Ω–æ –±—Ä–∞—Ç—å –¢–û–õ–¨–ö–û –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏. –í —Ä–µ–∑—é–º–µ —É–∫–∞–∑–∞–Ω—ã –ø—Ä–æ—à–ª—ã–µ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã - –æ–Ω–∏ –ù–ï —è–≤–ª—è—é—Ç—Å—è —Ü–µ–ª–µ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π!

–ö–æ–≥–¥–∞ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Ç–µ–±–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Å–≤–æ—ë —Ä–µ–∑—é–º–µ:
1. –ù–∞–π–¥–∏ –≤ –í–ê–ö–ê–ù–°–ò–ò –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–æ–±—ã—á–Ω–æ –≤ –Ω–∞—á–∞–ª–µ —Ç–µ–∫—Å—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ú—ã Place.01...")
2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –í–ê–ö–ê–ù–°–ò–ò –∏ –≤—ã–¥–µ–ª–∏ –ø—è—Ç—å —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–¥–±–µ—Ä–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑—é–º–µ

–§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–µ–µ:
–ü–æ—á–µ–º—É —è —Ö–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–∂—É –¥–ª—è <company X>
–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ/–∑–∞–¥–∞—á–∞ ‚Üí –ú–æ—ë –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ/–∑–∞–¥–∞—á–∞ ‚Üí –ú–æ—ë –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ/–∑–∞–¥–∞—á–∞ ‚Üí –ú–æ—ë –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ/–∑–∞–¥–∞—á–∞ ‚Üí –ú–æ—ë –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ/–∑–∞–¥–∞—á–∞ ‚Üí –ú–æ—ë –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ

–ì–¥–µ <company X> ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ò–ó –í–ê–ö–ê–ù–°–ò–ò (–ù–ï –∏–∑ —Ä–µ–∑—é–º–µ!), –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
–í –≤—ã–≤–æ–¥–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–æ–≤–∞ "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ", –Ω—É–º–µ—Ä–∞—Ü–∏–∏, —Å–∫–æ–±–æ–∫ –∏–ª–∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –ø–µ—Ä–µ–¥/–ø–æ—Å–ª–µ –ø–∞—Ä. –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ 5 –ø–∞—Ä —Å—Ç—Ä–æ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ.

–ï—Å–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º ‚Äî –ø–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –µ—Å–ª–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º ‚Äî –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.

–¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏:
{job_text}

–†–µ–∑—é–º–µ:
{cv_text}"""

    response = client.chat.completions.create(
        model="gpt-4-turbo",  # or "gpt-4o" for better performance
        messages=[{"role": "user", "content": prompt}],
        temperature=0.3,
        max_tokens=700
    )
    return response.choices[0].message.content.strip()

# Part 3: Why do I want to work at this company?
async def generate_why_company(job_text, cv_text):
    """Generate the 'Why I want to work at this company' section."""
    prompt = f"""–Ø —Ö–æ—á—É, —á—Ç–æ–±—ã —Ç—ã –ø–æ–º–æ–≥ –º–Ω–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á–∞—Å—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ "–ü–æ—á–µ–º—É —è —Ö–æ—á—É —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏?" (–∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ). 

–í–ê–ñ–ù–û: –ö–æ–º–ø–∞–Ω–∏—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –ø–∏—à–µ—Ç—Å—è –ø–∏—Å—å–º–æ, —É–∫–∞–∑–∞–Ω–∞ –≤ –í–ê–ö–ê–ù–°–ò–ò, –∞ –ù–ï –≤ —Ä–µ–∑—é–º–µ. –í —Ä–µ–∑—é–º–µ —É–∫–∞–∑–∞–Ω—ã –ø—Ä–æ—à–ª—ã–µ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.

–ö–æ–≥–¥–∞ —è –¥–∞—é —Ç–µ–±–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Å–≤–æ—ë —Ä–µ–∑—é–º–µ, –¥–µ–π—Å—Ç–≤—É–π —Ç–∞–∫:
1. –ù–∞–π–¥–∏ –≤ –í–ê–ö–ê–ù–°–ò–ò –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –µ—ë –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–±—ã—á–Ω–æ –≤ –Ω–∞—á–∞–ª–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ú—ã Place.01...")
2. –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –≠–¢–û–ô –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –í–ê–ö–ê–ù–°–ò–ò: —á–µ–º –æ–Ω–∞ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è, –∫–∞–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ –º–∏—Å—Å–∏—é –æ–∑–≤—É—á–∏–≤–∞–µ—Ç
3. –í–∑–≥–ª—è–Ω–∏ –Ω–∞ —Ä–µ–∑—é–º–µ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –æ–ø—ã—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
4. –°–æ—Å—Ç–∞–≤—å –∫–æ—Ä–æ—Ç–∫–∏–π –∞–±–∑–∞—Ü (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –æ —Ç–æ–º, –ø–æ—á–µ–º—É –∫–∞–Ω–¥–∏–¥–∞—Ç—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ –∏–º–µ–Ω–Ω–æ –ö–û–ú–ü–ê–ù–ò–Ø –ò–ó –í–ê–ö–ê–ù–°–ò–ò

–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–ø–∏—Ä–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –∫–æ–º–ø–∞–Ω–∏–∏ –ò–ó –í–ê–ö–ê–ù–°–ò–ò.

–ï—Å–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º ‚Äî –≤–µ—Å—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º; –µ—Å–ª–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º ‚Äî –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.
–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ–¥–ø–∏—Å–µ–π, –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ —Å–∞–º "–ª–∏—á–Ω—ã–π" –∞–±–∑–∞—Ü.

–¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏:
{job_text}

–†–µ–∑—é–º–µ:
{cv_text}"""

    response = client.chat.completions.create(
        model="gpt-4-turbo",  # or "gpt-4o"
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
        max_tokens=400
    )
    return response.choices[0].message.content.strip()

# Part 4: Contacts
async def generate_contacts(job_text, cv_text):
    """Generate the contacts section."""
    prompt = f"""–Ø —Ö–æ—á—É, —á—Ç–æ–±—ã —Ç—ã –ø–æ–º–æ–≥ –º–Ω–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç—ã. –ö–æ–≥–¥–∞ —è –¥–∞—é —Ç–µ–±–µ —Å–≤–æ—ë —Ä–µ–∑—é–º–µ, –≤—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–µ:

–ò–∑–≤–ª–µ–∫–∏ –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—é–º–µ: –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, e-mail, –≥–æ—Ä–æ–¥ –∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) —Å—Å—ã–ª–∫—É –Ω–∞ LinkedIn –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å.
–†–∞–∑–º–µ—Å—Ç–∏ —ç—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–æ—Å—Ç—ã–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–ø–∏—Å–∫–æ–º: –ò–º—è: –¢–µ–ª–µ—Ñ–æ–Ω: E-mail: –ì–æ—Ä–æ–¥: LinkedIn: (–£–∫–∞–∑—ã–≤–∞–π —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –≤ —Ä–µ–∑—é–º–µ.)
–í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å –æ–¥–Ω—É –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤—É—é, –¥—Ä—É–∂–µ–ª—é–±–Ω—É—é —Å—Ç—Ä–æ–∫—É-CTA ("–ë—É–¥—É —Ä–∞–¥(–∞) –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã", "–ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —á—Ç–æ-—Ç–æ —É—Ç–æ—á–Ω–∏—Ç—å ‚Äî –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏", "–ì–æ—Ç–æ–≤(–∞) –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ ‚Äî –ø–∏—à–∏—Ç–µ!" –∏ —Ç.–ø., –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∏ –±–µ–∑ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π).
–û—Ç–≤–µ—Ç –ø–∏—à–∏ –Ω–∞ —è–∑—ã–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏: –µ—Å–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º ‚Äî –≤—Å—ë –Ω–∞ —Ä—É—Å—Å–∫–æ–º; –µ—Å–ª–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º ‚Äî –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.

–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π, –ø–æ–¥–ø–∏—Å–µ–π, —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤—ã–π CTA.

–¢–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏:
{job_text}

–†–µ–∑—é–º–µ:
{cv_text}"""

    response = client.chat.completions.create(
        model="gpt-4-turbo",  # or "gpt-4o"
        messages=[{"role": "user", "content": prompt}],
        temperature=0.5,
        max_tokens=300
    )
    return response.choices[0].message.content.strip()

# Main message handler
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text
    chat_id = update.message.chat_id

    if not user_message:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    # Get current state
    state = context.user_data.get('state', WAITING_FOR_CV)

    # Handle CV submission
    if state == WAITING_FOR_CV:
        # Save CV
        context.user_data['cv'] = user_message
        context.user_data['state'] = READY_FOR_JOBS
        
        await update.message.reply_text(
            '–û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤–∞—à–µ —Ä–µ–∑—é–º–µ. ‚úÖ\n\n'
            '–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç—ã –≤–∞–∫–∞–Ω—Å–∏–π, '
            '–∏ —è –±—É–¥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞.\n\n'
            '–ö–æ–º–∞–Ω–¥—ã:\n'
            '/reset - –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—é–º–µ\n'
            '/show_cv - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ'
        )
        return

    # Handle job posting submission
    if state == READY_FOR_JOBS:
        # Check if we're already processing
        if context.user_data.get('processing', False):
            await update.message.reply_text("–£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
            return
        
        # Set processing flag
        context.user_data['processing'] = True

        await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")

        try:
            # Get saved CV
            cv_text = context.user_data['cv']
            job_text = user_message
            
            # Detect primary language of the job posting
            input_language = detect_primary_language(job_text)
            
            # Generate all parts
            logger.info("Generating About Me section...")
            about_me = await generate_about_me(job_text, cv_text)
            
            logger.info("Generating Good Fit section...")
            good_fit = await generate_good_fit(job_text, cv_text)
            
            logger.info("Generating Why Company section...")
            why_company = await generate_why_company(job_text, cv_text)
            
            logger.info("Generating Contacts section...")
            contacts = await generate_contacts(job_text, cv_text)
            
            # Combine all parts
            cover_letter = f"""{about_me}

{good_fit}

{why_company}

{contacts}"""

            # Check language consistency
            letter_language = check_language_consistency(cover_letter)
            
            if letter_language == 'mixed':
                logger.info("Mixed languages detected, unifying...")
                cover_letter = await unify_language(cover_letter, input_language)
            
            # Escape special characters for MarkdownV2
            escaped_letter = escape_markdown_v2(cover_letter)
            
            # Send the complete cover letter in Monospace format
            formatted_message = f"`{escaped_letter}`"
            
            await update.message.reply_text(
                formatted_message,
                parse_mode='MarkdownV2'
            )
            
            await update.message.reply_text(
                "–ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞. üöÄ"
            )

        except Exception as e:
            logger.error(f"Error generating cover letter: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        finally:
            # Reset processing flag
            context.user_data['processing'] = False

# Handler for document uploads (PDF/DOCX)
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    document = update.message.document
    if not document:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    file_name = document.file_name.lower()
    mime_type = document.mime_type
    file = await context.bot.get_file(document.file_id)

    # Download file to a temporary location
    with tempfile.NamedTemporaryFile(delete=True) as tmp:
        await file.download_to_drive(tmp.name)
        try:
            if file_name.endswith('.pdf') or (mime_type and 'pdf' in mime_type):
                # Parse PDF
                reader = PdfReader(tmp.name)
                text = "\n".join(page.extract_text() or '' for page in reader.pages)
            elif file_name.endswith('.docx') or (mime_type and 'word' in mime_type):
                # Parse DOCX
                doc = docx.Document(tmp.name)
                text = "\n".join([para.text for para in doc.paragraphs])
            else:
                await update.message.reply_text("–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –∏–ª–∏ DOCX.")
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
            return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –ø–æ–¥–∞—á–∏ –≤–∞–∫–∞–Ω—Å–∏–π
    context.user_data['cv'] = text
    context.user_data['state'] = READY_FOR_JOBS
    await update.message.reply_text(
        '–û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤–∞—à–µ —Ä–µ–∑—é–º–µ –∏–∑ —Ñ–∞–π–ª–∞. ‚úÖ\n\n'
        '–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç—ã –≤–∞–∫–∞–Ω—Å–∏–π, –∏ —è –±—É–¥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞.\n\n'
        '–ö–æ–º–∞–Ω–¥—ã:\n'
        '/reset - –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—é–º–µ\n'
        '/show_cv - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ'
    )

def main() -> None:
    """Start the bot."""
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # Register handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("reset", reset))
    application.add_handler(CommandHandler("show_cv", show_cv))
    application.add_handler(MessageHandler(filters.Document.PDF | filters.Document.DOCX, handle_document))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Run the bot
    logger.info("Bot started polling...")
    application.run_polling()

if __name__ == '__main__':
    main() 