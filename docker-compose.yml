version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: cover_letter_bot_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-cover_letter_bot}
      POSTGRES_USER: ${POSTGRES_USER:-bot_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password_here}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bot_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # OAuth Webhook Server
  oauth_webhook:
    build: .
    container_name: cover_letter_bot_webhook
    command: python oauth_webhook.py
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-bot_user}:${POSTGRES_PASSWORD:-your_secure_password_here}@postgres:5432/${POSTGRES_DB:-cover_letter_bot}
      HH_CLIENT_ID: ${HH_CLIENT_ID}
      HH_CLIENT_SECRET: ${HH_CLIENT_SECRET}
      HH_REDIRECT_URI: ${HH_REDIRECT_URI}
    ports:
      - "${WEBHOOK_PORT:-8080}:8080"
    volumes:
      - .:/app
    restart: unless-stopped

  # Telegram Bot Application (optional - if you want to run bot in Docker)
  bot:
    build: .
    container_name: cover_letter_bot
    depends_on:
      postgres:
        condition: service_healthy
      oauth_webhook:
        condition: service_started
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      DATABASE_URL: postgresql://${POSTGRES_USER:-bot_user}:${POSTGRES_PASSWORD:-your_secure_password_here}@postgres:5432/${POSTGRES_DB:-cover_letter_bot}
      HH_CLIENT_ID: ${HH_CLIENT_ID}
      HH_CLIENT_SECRET: ${HH_CLIENT_SECRET}
      HH_REDIRECT_URI: ${HH_REDIRECT_URI}
    volumes:
      - .:/app
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
