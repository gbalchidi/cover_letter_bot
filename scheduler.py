"""
–ú–æ–¥—É–ª—å –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
"""
import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict
import json

from hh_client import HHAPIClient, HHVacancySearcher
from resume_analyzer import ResumeAnalyzer
from vacancy_scorer import VacancyScorer
from repositories.supabase_client import SupabaseClient
from repositories.repositories import UserRepository, ResumeRepository

logger = logging.getLogger(__name__)


class VacancyScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π"""
    
    def __init__(self, bot, openai_client, supabase_client):
        self.bot = bot
        self.openai_client = openai_client
        self.supabase = supabase_client
        
        # Async lock to prevent concurrent runs
        self._search_lock = asyncio.Lock()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.user_repo = UserRepository(supabase_client)
        self.resume_repo = ResumeRepository(supabase_client)
        self.resume_analyzer = ResumeAnalyzer(openai_client)
        self.vacancy_scorer = VacancyScorer()
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
        self.sent_vacancies_table = "sent_vacancies"
        
    async def run_daily_search(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        # Use async lock to prevent concurrent runs
        async with self._search_lock:
            logger.info("Starting daily vacancy search...")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                active_users = await self._get_active_users()
                logger.info(f"Found {len(active_users)} active users")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                for user in active_users:
                    try:
                        await self._process_user(user)
                        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                        await asyncio.sleep(2)
                    except Exception as e:
                        logger.error(f"Error processing user {user.get('telegram_id')}: {e}")
                        
            except Exception as e:
                logger.error(f"Daily search failed: {e}")
                
            logger.info("Daily vacancy search completed")
    
    async def _get_active_users(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ–∑—é–º–µ"""
        try:
            # –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ä–µ–∑—é–º–µ
            response = self.supabase.table("resumes").select("telegram_id").execute()
            
            if response.data:
                users = [{"telegram_id": row["telegram_id"]} for row in response.data]
                logger.info(f"Found {len(users)} users with resumes: {[u['telegram_id'] for u in users]}")
                return users
            else:
                logger.warning("No users with resumes found in database")
                return []
            
        except Exception as e:
            logger.error(f"Failed to get active users: {e}")
            return []
    
    async def _process_user(self, user: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        telegram_id = user["telegram_id"]
        logger.info(f"Processing user {telegram_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cv_text = await self.resume_repo.get_resume(telegram_id)
            if not cv_text:
                logger.warning(f"No resume found for user {telegram_id}")
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ
            user_profile = await self.resume_analyzer.analyze_resume(cv_text)
            
            # –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
            daily_vacancies = await self._find_daily_vacancies(user_profile, telegram_id)
            
            if daily_vacancies:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await self._send_vacancies_to_user(telegram_id, daily_vacancies)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö
                await self._save_sent_vacancies(telegram_id, daily_vacancies)
                
                logger.info(f"Sent {len(daily_vacancies)} vacancies to user {telegram_id}")
            else:
                logger.info(f"No new vacancies found for user {telegram_id}")
                
        except Exception as e:
            logger.error(f"Error processing user {telegram_id}: {e}")
    
    async def _find_daily_vacancies(self, user_profile: Dict, telegram_id: int) -> List[Dict]:
        """–ò—â–µ—Ç –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            sent_vacancy_ids = await self._get_sent_vacancy_ids(telegram_id, days=7)
            
            # –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —á–µ—Ä–µ–∑ HH.ru API
            async with HHAPIClient() as hh_client:
                searcher = HHVacancySearcher(hh_client)
                all_vacancies = await searcher.search_with_fallback(user_profile)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
            new_vacancies = [
                v for v in all_vacancies 
                if v['id'] not in sent_vacancy_ids
            ]
            
            if not new_vacancies:
                logger.info(f"No new vacancies for user {telegram_id}")
                return []
            
            # –°–∫–æ—Ä–∏–º –∏ —Ä–∞–Ω–∂–∏—Ä—É–µ–º
            scored_vacancies = self.vacancy_scorer.score_and_rank_vacancies(
                new_vacancies, user_profile
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-10
            return scored_vacancies[:10]
            
        except Exception as e:
            logger.error(f"Error finding vacancies for user {telegram_id}: {e}")
            return []
    
    async def _get_sent_vacancy_ids(self, telegram_id: int, days: int = 7) -> set:
        """–ü–æ–ª—É—á–∞–µ—Ç ID –≤–∞–∫–∞–Ω—Å–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
        try:
            cutoff_date = datetime.now() - timedelta(days=days)
            
            response = self.supabase.table(self.sent_vacancies_table).select("vacancy_id").eq(
                "telegram_id", telegram_id
            ).gte("sent_at", cutoff_date.isoformat()).execute()
            
            if response.data:
                sent_ids = {row["vacancy_id"] for row in response.data}
                logger.info(f"User {telegram_id} has {len(sent_ids)} sent vacancies in last {days} days")
                return sent_ids
            else:
                logger.info(f"User {telegram_id} has no sent vacancies in last {days} days")
                return set()
            
        except Exception as e:
            logger.error(f"Error getting sent vacancy IDs for user {telegram_id}: {e}")
            logger.error(f"This might be because 'sent_vacancies' table doesn't exist. Use /sql_schema to create it.")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π set —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫
            return set()
    
    async def _send_vacancies_to_user(self, telegram_id: int, vacancies: List[Dict]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = "üéØ **–í–∞—à–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n\n"
            
            for i, vacancy in enumerate(vacancies, 1):
                score = vacancy.get('score', 0)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Ä–ø–ª–∞—Ç–µ
                salary_info = ""
                if vacancy.get('salary'):
                    salary = vacancy['salary']
                    salary_from = salary.get('from', '')
                    salary_to = salary.get('to', '')
                    currency = salary.get('currency', 'RUR')
                    
                    if salary_from and salary_to:
                        salary_info = f"üí∞ {salary_from} - {salary_to} {currency}"
                    elif salary_from:
                        salary_info = f"üí∞ –æ—Ç {salary_from} {currency}"
                    elif salary_to:
                        salary_info = f"üí∞ –¥–æ {salary_to} {currency}"
                
                vacancy_name = vacancy.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
                vacancy_url = vacancy.get('alternate_url', '')
                
                # –ù–∞–∑–≤–∞–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
                if vacancy_url:
                    message += f"{i}. **[{vacancy_name}]({vacancy_url})**\n"
                else:
                    message += f"{i}. **{vacancy_name}**\n"
                
                message += f"üè¢ {vacancy['employer']['name']}\n"
                
                if salary_info:
                    message += f"{salary_info}\n"
                
                message += f"üìç {vacancy.get('area', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                message += f"üìä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.1%}\n\n"
            
            message += "–£–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã! üöÄ"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=telegram_id,
                text=message,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            
            logger.info(f"Successfully sent {len(vacancies)} vacancies to user {telegram_id}")
            
        except Exception as e:
            logger.error(f"Error sending message to user {telegram_id}: {e}")
    
    async def _save_sent_vacancies(self, telegram_id: int, vacancies: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö"""
        try:
            current_time = datetime.now().isoformat()
            
            records = []
            for vacancy in vacancies:
                records.append({
                    "telegram_id": telegram_id,
                    "vacancy_id": vacancy['id'],
                    "vacancy_name": vacancy['name'],
                    "employer_name": vacancy['employer']['name'],
                    "score": vacancy.get('score', 0),
                    "sent_at": current_time
                })
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            response = self.supabase.table(self.sent_vacancies_table).insert(records).execute()
            
            if response.data:
                logger.info(f"Successfully saved {len(records)} sent vacancy records for user {telegram_id}")
            else:
                logger.warning(f"Failed to save sent vacancies for user {telegram_id}")
                
        except Exception as e:
            logger.error(f"Error saving sent vacancies for user {telegram_id}: {e}")
            logger.error(f"This might be because 'sent_vacancies' table doesn't exist. Use /sql_schema to create it.")
            # –ù–µ –ø–∞–¥–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã sent_vacancies (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
async def create_sent_vacancies_table(supabase_client):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π"""
    try:
        # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã (–Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤ Supabase UI –∏–ª–∏ —á–µ—Ä–µ–∑ SQL)
        sql_schema = """
        CREATE TABLE IF NOT EXISTS sent_vacancies (
            id SERIAL PRIMARY KEY,
            telegram_id BIGINT NOT NULL,
            vacancy_id VARCHAR(50) NOT NULL,
            vacancy_name TEXT,
            employer_name TEXT,
            score DECIMAL(5,3),
            sent_at TIMESTAMP DEFAULT NOW(),
            UNIQUE(telegram_id, vacancy_id)
        );
        
        CREATE INDEX IF NOT EXISTS idx_sent_vacancies_telegram_id ON sent_vacancies(telegram_id);
        CREATE INDEX IF NOT EXISTS idx_sent_vacancies_sent_at ON sent_vacancies(sent_at);
        """
        
        logger.info("Schema for sent_vacancies table:")
        logger.info(sql_schema)
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ—Ç SQL –≤ Supabase
        
    except Exception as e:
        logger.error(f"Error creating table schema: {e}")


# REMOVED: Manual scheduler function to prevent conflicts with AutoScheduler
# The AutoScheduler (auto_scheduler.py) handles all scheduling automatically


# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def test_scheduler(bot, openai_client, supabase_client, test_user_id: int):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    scheduler = VacancyScheduler(bot, openai_client, supabase_client)
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await scheduler._process_user({"telegram_id": test_user_id})
        logger.info("Test completed successfully")
        
    except Exception as e:
        logger.error(f"Test failed: {e}")


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    import os
    from openai import OpenAI
    from repositories.supabase_client import SupabaseClient
    
    logging.basicConfig(level=logging.INFO)
    
    # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    supabase_client = SupabaseClient(
        os.getenv("SUPABASE_URL"), 
        os.getenv("SUPABASE_KEY")
    )
    
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –±–æ—Ç–∞
    class MockBot:
        async def send_message(self, chat_id, text, parse_mode=None, disable_web_page_preview=None):
            print(f"Message to {chat_id}: {text}")
    
    mock_bot = MockBot()
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    # asyncio.run(test_scheduler(mock_bot, openai_client, supabase_client, 123456789))