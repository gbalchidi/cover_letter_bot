"""
Telegram commands for HH.ru integration
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging
from hh_oauth_client import get_oauth_client
from repositories.repositories import HHOAuthRepository, HHUserResumesRepository, SentVacanciesRepository
from datetime import datetime

logger = logging.getLogger(__name__)

# Global repositories (will be initialized in main)
hh_oauth_repo: HHOAuthRepository = None
hh_resumes_repo: HHUserResumesRepository = None
sent_vacancies_repo: SentVacanciesRepository = None


async def hh_auth_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    /hh_auth - Start HH.ru OAuth authorization
    """
    telegram_id = update.message.from_user.id

    try:
        # Check if already authorized
        tokens = await hh_oauth_repo.get_tokens(telegram_id)
        if tokens and tokens.get('expires_at') and tokens['expires_at'] > datetime.utcnow():
            await update.message.reply_text(
                "‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –Ω–∞ HH.ru!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "/hh_status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
                "/hh_resumes - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—é–º–µ\n"
                "/hh_logout - –≤—ã–π—Ç–∏"
            )
            return

        # Generate authorization URL
        oauth_client = get_oauth_client()
        auth_url = oauth_client.get_authorization_url(state=str(telegram_id))

        # Create inline keyboard with auth button
        keyboard = [[InlineKeyboardButton("üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ HH.ru", url=auth_url)]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üîë **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ HH.ru**\n\n"
            "–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç HH.ru.\n\n"
            "**–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç:**\n"
            "1. –í—ã –ø–µ—Ä–µ–π–¥–µ—Ç–µ –Ω–∞ —Å–∞–π—Ç HH.ru\n"
            "2. –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç–µ—Å—å (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã)\n"
            "3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é\n"
            "4. –í–µ—Ä–Ω–µ—Ç–µ—Å—å –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–æ—Ç–∞\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(f"Error in hh_auth_command: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def hh_status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    /hh_status - Check HH.ru authorization status
    """
    telegram_id = update.message.from_user.id

    try:
        tokens = await hh_oauth_repo.get_tokens(telegram_id)

        if not tokens:
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –Ω–∞ HH.ru\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /hh_auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
            )
            return

        # Check if token is expired
        expires_at = tokens.get('expires_at')
        is_expired = expires_at and expires_at < datetime.utcnow()

        # Get resumes count
        resumes = await hh_resumes_repo.get_resumes(telegram_id)
        resumes_count = len(resumes)

        # Get sent vacancies count
        sent_vacancies = await sent_vacancies_repo.get_sent_vacancies(telegram_id, limit=1000)
        sent_count = len(sent_vacancies)

        status_emoji = "‚úÖ" if not is_expired else "‚ö†Ô∏è"
        status_text = "–ê–∫—Ç–∏–≤–Ω–∞" if not is_expired else "–ò—Å—Ç–µ–∫–ª–∞"

        message = f"{status_emoji} **–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ HH.ru**\n\n"
        message += f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {status_text}\n"
        if expires_at:
            message += f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {expires_at.strftime('%d.%m.%Y %H:%M')}\n"
        message += f"\nüìÑ –†–µ–∑—é–º–µ –Ω–∞ HH.ru: {resumes_count}\n"
        message += f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–∫–ª–∏–∫–æ–≤: {sent_count}\n"

        if is_expired:
            message += "\n‚ö†Ô∏è –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /hh_auth –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"

        await update.message.reply_text(message, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"Error in hh_status_command: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞"
        )


async def hh_resumes_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    /hh_resumes - List user's HH.ru resumes
    """
    telegram_id = update.message.from_user.id

    try:
        # Check authorization
        tokens = await hh_oauth_repo.get_tokens(telegram_id)
        if not tokens:
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –Ω–∞ HH.ru\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /hh_auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
            )
            return

        # Get resumes
        resumes = await hh_resumes_repo.get_resumes(telegram_id)

        if not resumes:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–∑—é–º–µ –Ω–∞ HH.ru\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑—é–º–µ –Ω–∞ —Å–∞–π—Ç–µ hh.ru, –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /hh_auth –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
            )
            return

        message = "üìÑ **–í–∞—à–∏ —Ä–µ–∑—é–º–µ –Ω–∞ HH.ru:**\n\n"

        for i, resume in enumerate(resumes, 1):
            default_mark = " ‚≠ê" if resume.get('is_default') else ""
            message += f"{i}. {resume.get('resume_title', '–†–µ–∑—é–º–µ')}{default_mark}\n"
            message += f"   ID: `{resume.get('resume_id')}`\n\n"

        message += "\n‚≠ê - —Ä–µ–∑—é–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Ç–∫–ª–∏–∫–æ–≤"

        await update.message.reply_text(message, parse_mode='Markdown')

    except Exception as e:
        logger.error(f"Error in hh_resumes_command: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑—é–º–µ"
        )


async def hh_logout_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    /hh_logout - Logout from HH.ru (delete tokens)
    """
    telegram_id = update.message.from_user.id

    try:
        await hh_oauth_repo.delete_tokens(telegram_id)
        await update.message.reply_text(
            "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ HH.ru\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /hh_auth –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        )

    except Exception as e:
        logger.error(f"Error in hh_logout_command: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"
        )


async def hh_apply_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    /hh_apply - Manually apply to a vacancy
    Usage: /hh_apply <vacancy_id>
    """
    telegram_id = update.message.from_user.id

    try:
        # Check if vacancy ID is provided
        if not context.args or len(context.args) == 0:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≤–∞–∫–∞–Ω—Å–∏–∏\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /hh_apply <vacancy_id>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /hh_apply 12345678"
            )
            return

        vacancy_id = context.args[0]

        # Check authorization
        tokens = await hh_oauth_repo.get_tokens(telegram_id)
        if not tokens or not tokens.get('access_token'):
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –Ω–∞ HH.ru\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /hh_auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
            )
            return

        # Check if token is expired
        expires_at = tokens.get('expires_at')
        if expires_at and expires_at < datetime.utcnow():
            await update.message.reply_text(
                "‚ö†Ô∏è –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /hh_auth –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
            )
            return

        # Get default resume
        default_resume = await hh_resumes_repo.get_default_resume(telegram_id)
        if not default_resume:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–∑—é–º–µ –Ω–∞ HH.ru\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /hh_resumes –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—é–º–µ"
            )
            return

        # Check if already applied
        already_sent = await sent_vacancies_repo.is_already_sent(telegram_id, vacancy_id)
        if already_sent:
            await update.message.reply_text(
                "‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é"
            )
            return

        await update.message.reply_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–∫–ª–∏–∫...")

        # Apply to vacancy
        oauth_client = get_oauth_client()
        # TODO: Generate cover letter from saved CV
        result = await oauth_client.apply_to_vacancy(
            access_token=tokens['access_token'],
            vacancy_id=vacancy_id,
            resume_id=default_resume['resume_id'],
            message="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏."
        )

        # Mark as sent
        await sent_vacancies_repo.mark_as_sent(
            telegram_id=telegram_id,
            vacancy_id=vacancy_id,
            vacancy_name="Manual application"
        )

        await update.message.reply_text(
            "‚úÖ –û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
            f"–í–∞–∫–∞–Ω—Å–∏—è: {vacancy_id}\n"
            f"–†–µ–∑—é–º–µ: {default_resume['resume_title']}"
        )

    except Exception as e:
        logger.error(f"Error in hh_apply_command: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞: {str(e)}"
        )
